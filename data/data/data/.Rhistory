library(randomForest)
library(caret)
# Load Dataset
load("./output/features2.Rdata")
y = c(rep(1,1000), rep(0, 1000))
seed <- 7
metric <- "Accuracy"
# Random Search
control <- caret::trainControl(method="repeatedcv", number=2, repeats=1, search="random")
set.seed(seed)
mtry <- sqrt(ncol(X))
time = system.time(rf_random <- caret::train(X, as.factor(y), method="rf", metric=metric, tuneLength=15, trControl=control))
library(randomForest)
load("./output/features2.Rdata")
y = c(rep(1,1000), rep(0, 1000))
K=5
n <- length(y)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
time <- rep(NA, K)
for (i in 1:K){
train.data <- X[s != i,]
train.label <- y[s != i]
test.data <- X[s == i,]
test.label <- y[s == i]
set.seed(415)
#fit <- randomForest(train.data, as.factor(train.label), ntree=100)
time[i] = system.time(fit <- tuneRF(train.data, as.factor(train.label), ntreeTry=30, doBest=TRUE))
#time[i] = system.time(fit <- tuneRF(train.data, as.factor(train.label), doBest=TRUE))
pred <- predict(fit, test.data)
cv.error[i] <- mean(pred != test.label)
}
load("~/GitHub/Fall2016-proj3-grp5/output/cv_RF.RData")
result
load("~/GitHub/Fall2016-proj3-grp5/output/cv_RF2.RData")
result
?train_BL()
#############################################
### Main execution script for experiments ###
#############################################
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread('./data/sift_features.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "./data/images/"
X1 = feature(image_dir)
cat("Feature extraction time:", (proc.time()-t)[3], " seconds \n")
# combine original and new features and save:
X = cbind(X0, X1)
save(X, file="./output/Feature_eval.RData")
# load("./output/Feature_eval.RData")
# train baseline and advanced models:
y = c(rep(1,1000), rep(0, 1000)) # labels: 0=dog, 1=chicken
models = train(X, y, saveas='./output/BL_and_ADV_models.RData')
# make prediction
load("./output/BL_and_ADV_models.RData")
t = proc.time()
pred = test(models$ADV_model, X)
cat("Prediction time:", (proc.time()-t)[3], " seconds \n")
library('xgboost')
install.packages("xgboost")
biocLite("EBImage")
#############################################
### Main execution script for experiments ###
#############################################
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread('./data/sift_features.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "./data/images/"
X1 = feature(image_dir)
cat("Feature extraction time:", (proc.time()-t)[3], " seconds \n")
# combine original and new features and save:
X = cbind(X0, X1)
save(X, file="./output/Feature_eval.RData")
# load("./output/Feature_eval.RData")
# train baseline and advanced models:
y = c(rep(1,1000), rep(0, 1000)) # labels: 0=dog, 1=chicken
models = train(X, y, saveas='./output/BL_and_ADV_models.RData')
# load provided features:
X0 = fread('./data/sift_features.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "./data/images/"
X1 = feature(image_dir)
install.packages("EBImage")
X1 = feature(image_dir)
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
* source("https://bioconductor.org/biocLite.R")
* biocLite("EBImage")
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
#############################################
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread('./data/sift_features.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "./data/images/"
X1 = feature(image_dir)
biocLite("EBImage")
X1 = feature(image_dir)
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread('./data/sift_features.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "./data/images/"
X1 = feature(image_dir)
image_dir = "C:\Users\Owner\Google Drive\2016 fall\Applied Data Science\proj 3\images"
image_dir = "C:/Users/Owner/Google Drive/2016 fall/Applied Data Science/proj 3/images"
X1 = feature(image_dir)
image_dir = "C:/Users/Owner/Google Drive/2016 fall/Applied Data Science/proj 3/images/"
X1 = feature(image_dir)
#############################################
### Main execution script for experiments ###
#############################################
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread('./data/sift_features.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "C:\Users\Owner\Google Drive\2016 fall\Applied Data Science\proj 3\images2\Project3_poodleKFC_test\Project3_poodleKFC_test\images_test\"
X1 = feature(image_dir)
#############################################
### Main execution script for experiments ###
#############################################
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread('./data/sift_features.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "C:/Users/Owner/Google Drive/2016 fall/Applied Data Science/proj 3/images2/Project3_poodleKFC_test/Project3_poodleKFC_test/images_test/"
X1 = feature(image_dir)
cat("Feature extraction time:", (proc.time()-t)[3], " seconds \n")
# combine original and new features and save:
X = cbind(X0, X1)
save(X, file="./output/Feature_eval.RData")
# load("./output/Feature_eval.RData")
# train baseline and advanced models:
y = c(rep(1,1000), rep(0, 1000)) # labels: 0=dog, 1=chicken
models = train(X, y, saveas='./output/BL_and_ADV_models.RData')
dim(X0)
#############################################
### Main execution script for experiments ###
#############################################
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread('./data/sift_features_test.csv')
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "C:/Users/Owner/Google Drive/2016 fall/Applied Data Science/proj 3/images2/Project3_poodleKFC_test/Project3_poodleKFC_test/images_test/"
X1 = feature(image_dir)
save(X, file="./output/Feature_eval.RData")
load("./output/BL_and_ADV_models.RData")
t = proc.time()
pred = test(models$ADV_model, X)
cat("Prediction time:", (proc.time()-t)[3], " seconds \n")
pred
length(pred)
dim(X)
X0 = fread('./data/sift_features_test.csv')
X0 = fread('C:/Users/Owner/Google Drive/2016 fall/Applied Data Science/proj 3/images2/Project3_poodleKFC_test/Project3_poodleKFC_test/sift_features_test.csv')
X0 = fread("C:/Users/Owner/Google Drive/2016 fall/Applied Data Science/proj 3/images2/Project3_poodleKFC_test/Project3_poodleKFC_test/sift_features_test.csv")
getwc()
getwd()
X0 = fread(./data/sift_features.csv)
X0 = fread(/data/sift_features.csv)
X0 = fread("./data/sift_features.csv")
load("./output/BL_and_ADV_models.RData")
t = proc.time()
pred = test(models$ADV_model, X)
cat("Prediction time:", (proc.time()-t)[3], " seconds \n")
pred
models
X = cbind(X0, X1)
save(X, file="./output/Feature_eval.RData")
# make prediction
load("./output/BL_and_ADV_models.RData")
t = proc.time()
pred = test(models$ADV_model, X)
pred = test(models$ADV_model, X)
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
library(data.table)
source("./lib/feature.R")
source("./lib/test.R")
source("./lib/train.R")
# load provided features:
X0 = fread("./data/sift_features.csv")
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
image_dir = "C:/Users/Owner/Google Drive/2016 fall/Applied Data Science/proj 3/images2/Project3_poodleKFC_test/Project3_poodleKFC_test/images_test/"
X1 = feature(image_dir)
View(X1)
X = cbind(X0, X1)
save(X, file="./output/Feature_eval.RData")
y = c(rep(1,1000), rep(0, 1000)) # labels: 0=dog, 1=chicken
load("./output/BL_and_ADV_models.RData")
# make prediction
load("./output/BL_and_ADV_models.RData")
t = proc.time()
pred = test(models$ADV_model, X)
load("./output/BL_and_ADV_models.RData")
t = proc.time()
pred = test(models$ADV_model, X)
load("./output/BL_and_ADV_models1.RData")
t = proc.time()
pred = test(models$ADV_model, X)
pred = test(models$ADV_model, as.matrix(X))
cat("Prediction time:", (proc.time()-t)[3], " seconds \n")
pred
View(X0)
View(X1)
pred = test(models$ADV_model, as.matrix(X))
X0 = fread("./data/sift feature_test.csv")
X0 = fread("./data/sift_features2.csv")
X0 = t(as.matrix(X0))
# Construct new visual features:
t = proc.time()
# combine original and new features and save:
X = cbind(X0, X1)
save(X, file="./output/Feature_eval.RData")
load("./output/BL_and_ADV_models1.RData")
t = proc.time()
pred = test(models$ADV_model, as.matrix(X))
cat("Prediction time:", (proc.time()-t)[3], " seconds \n")
pred
save(pred, file="./output/pred.RData")
pred = test(models$ADV_model, X)
pred
image_dir = "./data/images_test/"
X1 = feature(image_dir)
setwd("~/GitHub/Fall2016-proj4-pf2317")
load("~/GitHub/Fall2016-proj4-pf2317/data/Project4_data/lyr.RData")
load("~/GitHub/Fall2016-proj4-pf2317/data/Project4_data/lyr.RData")
View(lyr)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
h5ls("./data/A/A/A/TRAAAAW128F429D538.h5")
h5ls("./data/data/data/A/A/A/TRAAAAW128F429D538.h5")
h5ls("./data/data/data/A/A/A/TRAAABD128F429CF47.h5")
path<-"./data/data/data/A/A/A/TRAAABD128F429CF47.h5"
h5ls(path)
h5ls(path)
sound<-h5read(path,"/analysis")
sound
meta<-h5read(path,"/metadata")
sound$segments_loudness_max
?c()
getwd()
?rm
ls()
rm(list=ls())
###################
# Read Files Paths
###################
<<<<<<< HEAD
setwd("./data/data/data/MillionSongSubset/data")
setwd("./data/data/data/")
<<<<<<< HEAD
setwd("./data/data/data/")
zj <- c("A/A","A/B","A/C","A/D","A/E","A/F","A/G")
files <- dir(zj, recursive=TRUE, full.names=TRUE)
=======
setwd("./data/data/data/")
zac<-c("A/V","A/W","A/X","A/Y","A/Z","B/A","B/B")
files_zac <- dir(zac, recursive=TRUE, full.names=TRUE)
>>>>>>> 846492ad3d4003f6d4fc827f009822bf9717259a
rm(list=ls())
###################
# Read Files Paths
###################
setwd("./data/data/data/")
zj <- c("A/A","A/B","A/C","A/D","A/E","A/F","A/G")
files <- dir(zj, recursive=TRUE, full.names=TRUE)
setwd("./data/data/data/")
zac<-c("A/V","A/W","A/X","A/Y","A/Z","B/A","B/B")
files_zac <- dir(zac, recursive=TRUE, full.names=TRUE)
# # If you want to read all under current()
# files_bianbian <- dir(".", recursive=TRUE, full.names=TRUE)
###################
# Installing rhdf5#
###################
#source("http://bioconductor.org/biocLite.R")
#biocLite("rhdf5")
library(rhdf5)
##########################
# Explain a simple h5 file
##########################
h5ls("~/Documents/finalproject-group-2/data/MillionSongSubset/data/A/A/A/TRAAAAW128F429D538.h5")
# Read data under "/analysis"
termana<-h5read("~/Documents/finalproject-group-2/data/MillionSongSubset/data/A/A/A/TRAAAAW128F429D538.h5", "/analysis")
termana<-h5read("/Users/zac/Documents/Courses/4249_Applied Data Science/Proj5/MillionSongSubset/data/A/A/A/TRAAAAW128F429D538.h5", "/analysis")
###########################
# Extracting all songs data
##Note: we have three "songs" tag
########One under each "subfolder"
ptm <- proc.time()
a_songs<-c()
m_songs<-c()
b_songs<-c()
for (file in files){
for (file in files_zac){
dfmeta <- h5read(file, "/metadata")
dfanal <- h5read(file, "/analysis")
dfbrai <- h5read(file, "/musicbrainz")
a_song <-dfanal$songs
m_song <-dfmeta$songs
b_song <-dfbrai$songs
m_songs<-rbind(m_songs,m_song)
a_songs<-rbind(a_songs,a_song)
b_songs<-rbind(b_songs,b_song)
}
proc.time() - ptm
###Please change the number to 1-5 accordingly
##eg. Ziyue Jin: songs_1 <-cbind()
songs_1 <- cbind(files,a_songs,m_songs,b_songs)
save(songs_1,file="songs_1.RData")
songs_4<-cbind(files_zac,a_songs,m_songs,b_songs)
save(songs_4,file="songs_4.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/lyr.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/lyr.RData")
View(lyr)
View(lyr)
load("~/GitHub/Spr2016-Proj5-Grp2/data/song_3k.Rdata")
load("~/GitHub/Spr2016-Proj5-Grp2/data/songid.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/songs_15.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/songs_15.RData")
View(songs_15)
dim(songs_15)
load("~/GitHub/Spr2016-Proj5-Grp2/data/songid_clear.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/songs_15.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/songid_clear.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/songid.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/song_id.RData")
load("~/GitHub/Spr2016-Proj5-Grp2/data/song_3k.Rdata")
load("~/GitHub/Spr2016-Proj5-Grp2/data/fulldata.RData")
View(fulldata)
h5ls("./A/A/A/TRAAAAW128F429D538.h5")
h5ls("./A/A/A/TRAAABD128F429CF47.h5")
termana<-h5read("./A/A/A/TRAAABD128F429CF47.h5", "/analysis")
termana<-h5read("./A/A/A/TRAAABD128F429CF47.h5", "/analysis")
ptm <- proc.time()
a_songs<-c()
m_songs<-c()
b_songs<-c()
for (file in files){
for (file in files_zac){
dfmeta <- h5read(file, "/metadata")
dfanal <- h5read(file, "/analysis")
dfbrai <- h5read(file, "/musicbrainz")
a_song <-dfanal$songs
m_song <-dfmeta$songs
b_song <-dfbrai$songs
m_songs<-rbind(m_songs,m_song)
a_songs<-rbind(a_songs,a_song)
b_songs<-rbind(b_songs,b_song)
}
proc.time() - ptm
songs_1 <- cbind(files,a_songs,m_songs,b_songs)
rm(list=ls())
###################
# Read Files Paths
###################
setwd("./data/data/data/")
zj <- c("A/A","A/B","A/C","A/D","A/E","A/F","A/G")
files <- dir(zj, recursive=TRUE, full.names=TRUE)
setwd("./data/data/data/")
zac<-c("A/V","A/W","A/X","A/Y","A/Z","B/A","B/B")
files_zac <- dir(zac, recursive=TRUE, full.names=TRUE)
# # If you want to read all under current()
# files_bianbian <- dir(".", recursive=TRUE, full.names=TRUE)
###################
# Installing rhdf5#
###################
#source("http://bioconductor.org/biocLite.R")
#biocLite("rhdf5")
library(rhdf5)
##########################
# Explain a simple h5 file
##########################
h5ls("./A/A/A/TRAAABD128F429CF47.h5")
# Read data under "/analysis"
termana<-h5read("./A/A/A/TRAAABD128F429CF47.h5", "/analysis")
termana<-h5read("./A/A/A/TRAAABD128F429CF47.h5", "/analysis")
###########################
# Extracting all songs data
##Note: we have three "songs" tag
########One under each "subfolder"
ptm <- proc.time()
a_songs<-c()
m_songs<-c()
b_songs<-c()
for (file in files){
for (file in files_zac){
dfmeta <- h5read(file, "/metadata")
dfanal <- h5read(file, "/analysis")
dfbrai <- h5read(file, "/musicbrainz")
a_song <-dfanal$songs
m_song <-dfmeta$songs
b_song <-dfbrai$songs
m_songs<-rbind(m_songs,m_song)
a_songs<-rbind(a_songs,a_song)
b_songs<-rbind(b_songs,b_song)
}
proc.time() - ptm
###Please change the number to 1-5 accordingly
##eg. Ziyue Jin: songs_1 <-cbind()
songs_1 <- cbind(files,a_songs,m_songs,b_songs)
save(songs_1,file="songs_1.RData")
songs_4<-cbind(files_zac,a_songs,m_songs,b_songs)
save(songs_4,file="songs_4.RData")
setwd("./data/data/data/")
h5ls("./A/A/A/TRAAABD128F429CF47.h5")
getwd()
rm(list=ls())
getwd()
rm(list=ls())
###################
# Read Files Paths
###################
zj <- c("A/A","A/B","A/C","A/D","A/E","A/F","A/G")
files <- dir(zj, recursive=TRUE, full.names=TRUE)
zac<-c("A/V","A/W","A/X","A/Y","A/Z","B/A","B/B")
files_zac <- dir(zac, recursive=TRUE, full.names=TRUE)
# # If you want to read all under current()
# files_bianbian <- dir(".", recursive=TRUE, full.names=TRUE)
###################
# Installing rhdf5#
###################
#source("http://bioconductor.org/biocLite.R")
#biocLite("rhdf5")
library(rhdf5)
##########################
# Explain a simple h5 file
##########################
h5ls("./A/A/A/TRAAABD128F429CF47.h5")
# Read data under "/analysis"
termana<-h5read("./A/A/A/TRAAABD128F429CF47.h5", "/analysis")
termana<-h5read("./A/A/A/TRAAABD128F429CF47.h5", "/analysis")
###########################
# Extracting all songs data
##Note: we have three "songs" tag
########One under each "subfolder"
ptm <- proc.time()
a_songs<-c()
m_songs<-c()
b_songs<-c()
for (file in files){
for (file in files_zac){
dfmeta <- h5read(file, "/metadata")
dfanal <- h5read(file, "/analysis")
dfbrai <- h5read(file, "/musicbrainz")
a_song <-dfanal$songs
m_song <-dfmeta$songs
b_song <-dfbrai$songs
m_songs<-rbind(m_songs,m_song)
a_songs<-rbind(a_songs,a_song)
b_songs<-rbind(b_songs,b_song)
}
proc.time() - ptm
###Please change the number to 1-5 accordingly
##eg. Ziyue Jin: songs_1 <-cbind()
songs_1 <- cbind(files,a_songs,m_songs,b_songs)
save(songs_1,file="songs_1.RData")
songs_4<-cbind(files_zac,a_songs,m_songs,b_songs)
save(songs_4,file="songs_4.RData")
path<-"./data/data/data/A/A/A/TRAAABD128F429CF47.h5"
h5ls(path)
h5ls(path)
path<-"./data/data/data/A/A/A/TRAAABD128F429CF47.h5"
